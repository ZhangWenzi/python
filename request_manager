import requests

# response相关
# r.status_code #响应状态码
# r.raw #返回原始响应体，也就是 urllib 的 response 对象，使用 r.raw.read() 读取
# r.content #字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩
# r.text #字符串方式的响应体，会自动根据响应头部的字符编码进行解码
# r.headers #以字典对象存储服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回None
# #*特殊方法*#
# r.json() #Requests中内置的JSON解码器
# r.raise_for_status() #失败请求(非200响应)抛出异常

#主机名
base_url = 'http://10.0.10.61/'

# 默认请求头
headers = {
    'RDI': 'DT=DUK-TL30;SV=8.0.0;AV=4.0.10;CH=debugpackage',
    'User-Agent': 'Dalvik/2.1.0 (Linux; U; Android 8.0.0; DUK-TL30 Build/HUAWEIDUK-TL30)',
    'Authorization': 'GRMqLRQDJBEWSUVIB0U3YB1pNhsRYz4NDF5/cC8lc3McahpEPUt9H31FS31IU3RtdCQ=',
    'Cookie': '_HHDD_="{\\\"userId\\\":12197655,\\\"nick\\\":null,\\\"token\\\":\\\"ee3bd9b6df2474d2e47e350ca500d988\\\",\\\"extTime\\\":1578449817824,\\\"login\\\":false}"',
    'Accept': '*/*',
    'Date': 'Tue 8 Jan 2019 02:17:26 GMT'
}

# 默认超时时间
timeout = 10

"""
 GET方式请求

 参数说明: url 接口全地址
          params  请求参数，格式为dict

 返回值说明：如果接口响应码为200，则直接返回接口数据；否则返回None，并打印出异常信息
"""
def get_by_url(url, params=None):
    try:
        response = requests.get(url=url, params=params, headers=headers, timeout=timeout)
        response.raise_for_status()  # 如果响应状态码不是 200，就主动抛出异常
    except requests.RequestException as e:
        print(e)
        return None
    else:
        return response


"""
 POST方式请求

 参数说明: url 接口全地址
          params  请求参数，格式为dict

 返回值说明：如果接口响应码为200，则直接返回接口数据；否则返回None，并打印出异常信息
"""
def post_by_url(url, params=None):
    try:
        response = requests.post(url=url, data=params, headers=headers, timeout=timeout)
        response.raise_for_status()  # 如果响应状态码不是 200，就主动抛出异常
    except requests.RequestException as e:
        print(e)
        return None
    else:
        return response


"""
 GET方式请求

 参数说明: module 接口模块名
          path  接口地址
          params  请求参数，格式为dict
          
 返回值说明：如果接口响应码为200，则直接返回接口数据；否则返回None，并打印出异常信息
"""
def get(module, path, params=None):
    try:
        url = base_url + module + '/' + path
        print(url)
        response = requests.get(url=url, params=params, headers=headers, timeout=timeout)
        response.raise_for_status()  # 如果响应状态码不是 200，就主动抛出异常
    except requests.RequestException as e:
        print(e)
        return None
    else:
        return response


"""
 POST方式请求

 参数说明: module 接口模块名
          path  接口地址
          params  请求参数，格式为dict

 返回值说明：如果接口响应码为200，则直接返回接口数据；否则返回None，并打印出异常信息
"""
def post(module, path, params=None):
    try:
        url = base_url + module + '/' + path
        response = requests.post(url=url, data=params, headers=headers, timeout=timeout)
        response.raise_for_status()  # 如果响应状态码不是 200，就主动抛出异常
    except requests.RequestException as e:
        print(e)
        return None
    else:
        return response











